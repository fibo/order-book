{"version":3,"sources":["components/OrderBookSelect.tsx","components/OrderBookTable.tsx","components/OrderBook.tsx","environment.ts","reducers/dataFeed.ts","hooks/useWebSocket.ts","App.tsx","index.tsx"],"names":["OrderBookSelect","groupSize","className","OrderBookTable","rows","side","sideIsBuy","sideIsSell","classnames","map","label","i","price","size","total","percentage","style","width","OrderBook","data","asks","bids","onClickToggleFeed","onClickKillFeed","webSocketIsOpen","disabled","onClick","CONNECTING","WebSocket","CLOSING","CLOSED","OPEN","feedDataToOrderBook","feedOrdersToOrderRecord","roundPrice","value","base","Math","floor","ordersToBeRemoved","orders","reduce","orderRecord","aggregatedOrderBook","record","aggregate","Object","entries","roundedPrice","Number","sort","priceA","priceB","aggregateFeedData","selectWebSocketIsOpen","state","readyState","selectDataFeedGroupSize","dataFeedReducer","action","type","JSON","parse","isInfoVersion","event","hasSubscribedEvent","hasFeedName","feed","length","hasAsks","Array","isArray","hasBids","hasOrderBook","isSnapshot","endsWith","connected","orderBook","selectOrderBookData","previousAsks","previousBids","asksToBeRemoved","filter","bidsToBeRemoved","asksToKeep","bidsToKeep","forEach","push","concat","error","console","useWebSocket","webSocketUrl","useReducer","dispatch","webSocketRef","useRef","selectWebSocketReadyState","sendMessage","useCallback","message","webSocket","current","send","stringify","useEffect","onopen","onerror","onmessage","initializeWebSocket","App","process","orderBookData","selectOrderBookAggregatedData","feedIsConnected","selectDataFeedIsConnected","toggleFeed","product_ids","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.87eb4c44.chunk.js","sourcesContent":["import { GroupSize } from '../types/market';\n\nexport type OrderBookSelectProps = {\n  groupSize: GroupSize;\n};\n\nexport function OrderBookSelect({ groupSize }: OrderBookSelectProps) {\n  return (\n    <select className='order-book-select'>\n      <option>Group {groupSize}</option>\n    </select>\n  );\n}\n","import classnames from 'classnames';\n\nimport { FeedAggregatedDataRow } from '../types/feed';\nimport { MarketSide } from '../types/market';\n\nexport type OrderBookTableProps = {\n  rows: FeedAggregatedDataRow[];\n  side: MarketSide;\n};\n\nexport function OrderBookTable({ rows, side }: OrderBookTableProps) {\n  const sideIsBuy = side === 'buy';\n  const sideIsSell = side === 'sell';\n\n  return (\n    <div className='order-book-table'>\n      <div\n        className={classnames('order-book-table__header', {\n          'order-book-table__header--buy': sideIsBuy,\n          'order-book-table__header--sell': sideIsSell,\n        })}\n      >\n        {['price', 'size', 'total'].map((label, i) => (\n          <span key={i}>{label}</span>\n        ))}\n      </div>\n\n      <div className='order-book-table__body'>\n        {rows.map(([price, size, total, percentage], i) => (\n          <div\n            className={classnames('order-book-table__row', {\n              'order-book-table__row--buy': sideIsBuy,\n              'order-book-table__row--sell': sideIsSell,\n            })}\n            key={i}\n          >\n            <div\n              className={classnames('order-book-table__meter', {\n                'order-book-table__meter--buy': sideIsBuy,\n                'order-book-table__meter--sell': sideIsSell,\n              })}\n              style={{ width: `${percentage}%` }}\n            />\n\n            <span\n              className={classnames('order-book-table__cell', {\n                'order-book-table__cell--buy': sideIsBuy,\n                'order-book-table__cell--sell': sideIsSell,\n              })}\n            >\n              {price}\n            </span>\n            <span>{size}</span>\n            <span>{total}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { OrderBookSelect, OrderBookSelectProps } from '../components/OrderBookSelect';\nimport { OrderBookTable } from '../components/OrderBookTable';\nimport { FeedAggregatedData } from '../types/feed';\n\nexport type OrderBookProps = Pick<OrderBookSelectProps, 'groupSize'> & {\n  data: FeedAggregatedData;\n  onClickToggleFeed?: () => void;\n  onClickKillFeed?: () => void;\n  webSocketIsOpen?: boolean;\n};\n\nexport function OrderBook({\n  data: { asks, bids },\n  groupSize,\n  onClickToggleFeed,\n  onClickKillFeed,\n  webSocketIsOpen,\n}: OrderBookProps) {\n  return (\n    <div className='order-book'>\n      <div className='order-book__header'>\n        <div>Order Book</div>\n\n        <OrderBookSelect groupSize={groupSize} />\n      </div>\n\n      <div className='order-book__content'>\n        <OrderBookTable rows={asks} side='sell' />\n\n        <OrderBookTable rows={bids} side='buy' />\n      </div>\n\n      <div className='order-book__footer'>\n        <button className='button button--toggle' disabled={!webSocketIsOpen} onClick={onClickToggleFeed}>\n          Toggle Feed\n        </button>\n\n        <button className='button button--kill' disabled={!webSocketIsOpen} onClick={onClickKillFeed}>\n          Kill Feed\n        </button>\n      </div>\n    </div>\n  );\n}\n","export const WEBSOCKET_URL = process.env.REACT_APP_WEBSOCKET_URL;\n","import {\n  FeedData,\n  FeedOrder,\n  FeedAggregatedData,\n  FeedAggregatedDataRow,\n  FeedMessageInfoVersion,\n  FeedMessageSnapshot,\n  FeedMessageSubscribed,\n  FeedMessageUpdate,\n  OrderBook,\n  OrderRecord,\n  Price,\n  Size,\n  Total,\n  Percentage,\n} from '../types/feed';\nimport { GroupSize } from '../types/market';\nimport { Reducer, ReducerAction } from '../types/reducers';\n\ntype ActionType =\n  | 'WEBSOCKET_CLOSED'\n  | 'WEBSOCKET_CLOSING'\n  | 'WEBSOCKET_CONNECTING'\n  | 'WEBSOCKET_ERROR'\n  | 'WEBSOCKET_OPEN'\n  | 'WEBSOCKET_RECEIVE_MESSAGE';\n\nconst CONNECTING = WebSocket.CONNECTING;\nconst CLOSING = WebSocket.CLOSING;\nconst CLOSED = WebSocket.CLOSED;\nconst OPEN = WebSocket.OPEN;\n\ntype ReadyState = typeof CONNECTING | typeof CLOSED | typeof CLOSING | typeof OPEN;\n\nexport type DataFeedAction = ReducerAction<ActionType>;\ntype Action = DataFeedAction;\n\nexport type DataFeedReducer = Reducer<State, Action>;\n\nexport type WebSocketMessageReceived = Partial<FeedMessageInfoVersion> &\n  Partial<FeedMessageSnapshot> &\n  Partial<FeedMessageSubscribed> &\n  Partial<FeedMessageUpdate>;\n\n/*\n * State\n */\n\nexport type DataFeedState = {\n  aggregatedOrderBook: FeedAggregatedData;\n  feed?: string;\n  connected: boolean;\n  groupSize: GroupSize;\n  orderBook: OrderBook;\n  readyState: ReadyState | null;\n};\ntype State = DataFeedState;\n\nexport const dataFeedInitialState = (): State => ({\n  connected: false,\n  aggregatedOrderBook: {\n    asks: [],\n    bids: [],\n  },\n  groupSize: 0.5,\n  orderBook: {\n    asks: {},\n    bids: {},\n  },\n  readyState: null,\n});\n\n/*\n * Adapters\n */\n\nexport function feedDataToOrderBook({ asks, bids }: FeedData) {\n  return {\n    asks: feedOrdersToOrderRecord(asks),\n    bids: feedOrdersToOrderRecord(bids),\n  };\n}\n\nexport function roundPrice(groupSize: GroupSize, value: number) {\n  switch (groupSize) {\n    case 0.5: {\n      const base = Math.floor(value);\n      const rest = value - base;\n      return rest >= groupSize ? base + groupSize : base;\n    }\n\n    case 1: {\n      return Math.floor(value);\n    }\n\n    default:\n      return value;\n  }\n}\n\n// filter util\nconst ordersToBeRemoved = ([, size]: FeedOrder) => size === 0;\n\n// reducer util\nexport function feedOrdersToOrderRecord(orders: FeedOrder[]): OrderRecord {\n  return orders.reduce((orderRecord, [price, size]) => ({ ...orderRecord, [price]: size }), {});\n}\n\nfunction aggregatedOrderBook(groupSize: GroupSize, record: OrderRecord): FeedAggregatedDataRow[] {\n  const aggregate: Record<Price, { size: Size; total: Total; percentage: Percentage }> = {};\n\n  for (const [price, size] of Object.entries(record)) {\n    const roundedPrice = roundPrice(groupSize, Number(price));\n\n    if (typeof aggregate[roundedPrice] === 'undefined') {\n      aggregate[roundedPrice] = { size, total: 0, percentage: 0 };\n    } else {\n      aggregate[roundedPrice] = { size: aggregate[roundedPrice].size + size, total: 0, percentage: 0 };\n    }\n  }\n\n  return Object.entries(aggregate)\n    .sort(([priceA], [priceB]) => {\n      if (priceA < priceB) return 1;\n      if (priceA > priceB) return -1;\n      return 0;\n    })\n    .map(([price, { size, total, percentage }]) => [Number(price), size, total, percentage]);\n}\n\nfunction aggregateFeedData(groupSize: GroupSize, { asks, bids }: OrderBook): FeedAggregatedData {\n  return {\n    asks: aggregatedOrderBook(groupSize, asks),\n    bids: aggregatedOrderBook(groupSize, bids),\n  };\n}\n\n/*\n * Selectors\n */\n\nexport const selectWebSocketIsOpen = (state: State) => state.readyState === WebSocket.OPEN;\n\nexport const selectWebSocketReadyState = (state: State) => state.readyState;\n\nexport const selectDataFeedIsConnected = (state: State) => state.connected;\n\nexport const selectDataFeedGroupSize = (state: State) => state.groupSize;\n\nexport const selectOrderBookAggregatedData = (state: State) => state.aggregatedOrderBook;\n\nexport const selectOrderBookData = (state: State) => state.orderBook;\n\n/*\n * Reducer\n */\n\nexport function dataFeedReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'WEBSOCKET_CLOSED': {\n      return {\n        ...state,\n        readyState: CLOSED,\n      };\n    }\n\n    case 'WEBSOCKET_CLOSING': {\n      return {\n        ...state,\n        readyState: CLOSING,\n      };\n    }\n\n    case 'WEBSOCKET_CONNECTING': {\n      return {\n        ...state,\n        readyState: CONNECTING,\n      };\n    }\n\n    case 'WEBSOCKET_ERROR': {\n      return state;\n    }\n\n    case 'WEBSOCKET_OPEN': {\n      return {\n        ...state,\n        readyState: OPEN,\n      };\n    }\n\n    case 'WEBSOCKET_RECEIVE_MESSAGE': {\n      try {\n        const data = typeof action.data === 'string' ? (JSON.parse(action.data) as WebSocketMessageReceived) : {};\n\n        const isInfoVersion = data.event === 'info';\n        const hasSubscribedEvent = data.event === 'subscribed';\n        const hasFeedName = typeof data.feed === 'string' && data.feed.length > 0;\n        const hasAsks = Array.isArray(data.asks);\n        const hasBids = Array.isArray(data.bids);\n        const hasOrderBook = hasAsks && hasBids;\n        const isSnapshot = hasFeedName && (data.feed as string).endsWith('_snapshot');\n\n        switch (true) {\n          // First message.\n          case isInfoVersion: {\n            return {\n              ...state,\n              connected: true,\n            };\n          }\n\n          // Subsribed event.\n          case hasSubscribedEvent && hasFeedName: {\n            return {\n              ...state,\n              feed: data.feed,\n            };\n          }\n\n          // Initial snapshot.\n          case isSnapshot && hasOrderBook: {\n            const groupSize = selectDataFeedGroupSize(state);\n            const orderBook = feedDataToOrderBook(data as FeedData);\n\n            return {\n              ...state,\n              orderBook,\n              aggregatedOrderBook: aggregateFeedData(groupSize, orderBook),\n            };\n          }\n\n          // Diff data message.\n          case hasOrderBook && !isSnapshot: {\n            const { asks, bids } = data as FeedData;\n\n            const groupSize = selectDataFeedGroupSize(state);\n            const { asks: previousAsks, bids: previousBids } = selectOrderBookData(state);\n\n            const asksToBeRemoved = feedOrdersToOrderRecord(asks.filter(ordersToBeRemoved));\n            const bidsToBeRemoved = feedOrdersToOrderRecord(bids.filter(ordersToBeRemoved));\n\n            const asksToKeep = [] as FeedOrder[];\n            const bidsToKeep = [] as FeedOrder[];\n\n            Object.entries(previousAsks).forEach(([price, size]) => {\n              if (typeof asksToBeRemoved[Number(price)] !== 'undefined') {\n                asksToKeep.push([Number(price), size]);\n              }\n            });\n\n            Object.entries(previousBids).forEach(([price, size]) => {\n              if (typeof bidsToBeRemoved[Number(price)] !== 'undefined') {\n                bidsToKeep.push([Number(price), size]);\n              }\n            });\n\n            const orderBook = feedDataToOrderBook({\n              // asks with updated size will overwrite asksToKeep\n              // same for bids\n              asks: asksToKeep.concat(asks),\n              bids: bidsToKeep.concat(bids),\n            });\n\n            return {\n              ...state,\n              orderBook,\n              aggregatedOrderBook: aggregateFeedData(groupSize, orderBook),\n            };\n          }\n\n          default: {\n            return state;\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        return state;\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import { Dispatch, useCallback, useEffect, useReducer, useRef } from 'react';\n\nimport {\n  DataFeedReducer,\n  DataFeedState,\n  DataFeedAction,\n  dataFeedInitialState,\n  dataFeedReducer,\n  selectWebSocketIsOpen,\n  selectWebSocketReadyState,\n} from '../reducers/dataFeed';\nimport { FeedMessageSubscribe } from '../types/feed';\n\nexport type WebSocketDispatch = Dispatch<DataFeedAction>;\nexport type WebSocketMessageSent = FeedMessageSubscribe;\nexport type WebSocketSendMessage = (message: WebSocketMessageSent) => void;\n\nfunction initializeWebSocket(webSocketUrl: string, dispatch: WebSocketDispatch) {\n  try {\n    const webSocket = new WebSocket(webSocketUrl);\n\n    dispatch({ type: 'WEBSOCKET_CONNECTING' });\n\n    webSocket.onopen = () => {\n      dispatch({ type: 'WEBSOCKET_OPEN' });\n    };\n\n    webSocket.onerror = (error) => {\n      console.error(error);\n      dispatch({ type: 'WEBSOCKET_ERROR' });\n    };\n\n    webSocket.onmessage = (event) => {\n      dispatch({ type: 'WEBSOCKET_RECEIVE_MESSAGE', data: event.data });\n    };\n\n    return webSocket;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport function useWebSocket(webSocketUrl: string): [DataFeedState, WebSocketSendMessage] {\n  const [state, dispatch] = useReducer<DataFeedReducer>(dataFeedReducer, dataFeedInitialState());\n  const webSocketRef = useRef<WebSocket>();\n\n  const readyState = selectWebSocketReadyState(state);\n  const webSocketIsOpen = selectWebSocketIsOpen(state);\n\n  const sendMessage = useCallback(\n    (message: FeedMessageSubscribe) => {\n      if (webSocketIsOpen) {\n        const webSocket = webSocketRef.current;\n\n        if (webSocket) {\n          webSocket.send(JSON.stringify(message));\n        }\n      }\n    },\n    [webSocketIsOpen, webSocketRef],\n  );\n\n  useEffect(() => {\n    if (readyState === null) {\n      try {\n        const webSocket = initializeWebSocket(webSocketUrl, dispatch);\n        webSocketRef.current = webSocket;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }, [readyState, webSocketUrl]);\n\n  return [state, sendMessage];\n}\n","import { useCallback, useEffect } from 'react';\n\nimport { OrderBook } from './components/OrderBook';\nimport { WEBSOCKET_URL } from './environment';\nimport { useWebSocket } from './hooks/useWebSocket';\nimport {\n  selectDataFeedIsConnected,\n  selectDataFeedGroupSize,\n  selectWebSocketIsOpen,\n  selectOrderBookAggregatedData,\n} from './reducers/dataFeed';\n\nexport function App() {\n  const [state, sendMessage] = useWebSocket(WEBSOCKET_URL);\n\n  const groupSize = selectDataFeedGroupSize(state);\n  const webSocketIsOpen = selectWebSocketIsOpen(state);\n  const orderBookData = selectOrderBookAggregatedData(state);\n  const feedIsConnected = selectDataFeedIsConnected(state);\n\n  const toggleFeed = useCallback(() => {\n    if (webSocketIsOpen) {\n      sendMessage({ event: 'subscribe', feed: 'book_ui_1', product_ids: ['PI_XBTUSD'] });\n    }\n  }, [sendMessage, webSocketIsOpen]);\n\n  useEffect(() => {\n    if (feedIsConnected) {\n      toggleFeed();\n    }\n  }, [feedIsConnected, toggleFeed]);\n\n  return (\n    <div className='container'>\n      <OrderBook\n        data={orderBookData}\n        groupSize={groupSize}\n        onClickToggleFeed={toggleFeed}\n        onClickKillFeed={toggleFeed}\n        webSocketIsOpen={webSocketIsOpen}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './sass/styles.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('main'),\n);\n"],"sourceRoot":""}